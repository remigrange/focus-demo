package rodolphe.demo.dao.movies

create Task TK_GET_MOVIES_BY_CRITERIA {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : "
				select mov_id, title, released, year, runtime, description, metadas_json, imdbid
				from movie
				where 
					lower(title) like '%%'||lower(#SEARCH_TEXT#)||'%%'		
				order by title
				limit 20
			"
	attribute SEARCH_TEXT				{domain : DO_COMMENTAIRE				notNull:"true" 	inOut :"in"}
    attribute DTC_MOVIE	 				{domain : DO_DT_MOVIE_DTC 				notNull:"true" 	inOut :"out"}
}


create Task TK_GET_MOVIE_VIEW {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select 
    				v.*
    			From
    				(
    				Select
    					mov.mov_id, mov.title, mov.title as title_sort_only, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					movGen.genre_ids, 
    					movCou.country_ids, 
    					movLan.language_ids,  
    					mov.mov_id as rank 
	    			From
	    				movie mov
    				inner join ( select mov_id from movie Where mov_id >= #MIN_RANK# order by mov_id limit <%= maxRows %>) sel on sel.mov_id = mov.mov_id
	    			left join
	   					( select string_agg(gen_cd, '|') as genre_ids, mov_id from mov_gen  group by mov_id) movGen on mov.mov_id = movGen.mov_id 
    				left join  
    					( select string_agg(cou_cd, '|') as country_ids, mov_id from mov_cou  group by mov_id) movCou on mov.mov_id = movCou.mov_id 
    				left join  
    					( select string_agg(lan_cd, '|') as language_ids, mov_id from mov_lan  group by mov_id) movLan on mov.mov_id = movLan.mov_id 
    				) v
    			Where
    				v.rank >= #MIN_RANK#
    			Order by
    				v.rank
    			limit <%= maxRows %>
     "
    attribute MIN_RANK {domain : DO_ENTIER notNull:"true" inOut :"in"}
    attribute MAX_ROWS {domain : DO_ENTIER notNull:"true" inOut :"in"}
    attribute DTC_MOVIES {domain : DO_DT_MOVIE_VIEW_DTC notNull:"true" inOut :"out"}
}

create Task TK_GET_MOVIE_VIEW_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select 
    					mov.mov_id, mov.title, mov.title as title_sort_only, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					movGen.genre_ids, 
    					movCou.country_ids, 
    					movLan.language_ids,  
    					mov.mov_id as rank 
    			From
    				movie mov
    			left join
    					( select string_agg(gen_cd, '|') as genre_ids, mov_id from mov_gen  group by mov_id) movGen on mov.mov_id = movGen.mov_id 
    			left join  
    					( select string_agg(cou_cd, '|') as country_ids, mov_id from mov_cou  group by mov_id) movCou on mov.mov_id = movCou.mov_id 
    			left join  
    					( select string_agg(lan_cd, '|') as language_ids, mov_id from mov_lan  group by mov_id) movLan on mov.mov_id = movLan.mov_id 
    			Where
    				mov.mov_id = #MOV_ID#
      "
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE {domain : DO_DT_MOVIE_VIEW_DTO notNull:"true" inOut :"out"}
}

create Task TK_GET_MOVIE_VIEW_FOR_MOVIE_DETAILS_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select 
    					mov.mov_id, mov.title, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					movGen.genre_ids, 
    					movCou.country_ids, 
    					movLan.language_ids,  
    					mov.mov_id as rank 
    			From
    				movie mov
    			left join
    					( select string_agg(label, '|') as genre_ids, mov_id from mov_gen movGen inner join genre gen on gen.gen_cd = movGen.gen_cd group by mov_id) movGen on mov.mov_id = movGen.mov_id 
    			left join  
    					( select string_agg(label, '|') as country_ids, mov_id from mov_cou movCou inner join country cou on cou.cou_cd = movCou.cou_cd group by mov_id) movCou on mov.mov_id = movCou.mov_id 
    			left join  
    					( select string_agg(label, '|') as language_ids, mov_id from mov_lan movLan inner join language lan on lan.lan_cd = movLan.lan_cd group by mov_id) movLan on mov.mov_id = movLan.mov_id 
    			Where
    				mov.mov_id = #MOV_ID#
     "
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE {domain : DO_DT_MOVIE_VIEW_DTO notNull:"true" inOut :"out"}
}

create Task TK_GET_CASTING_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " select 
					casti.cast_id,
					peo.peo_name,
					rlmMov.label as role,
					casti.character_name
					--file.file_name,
					--file.mime_type,
					--file.file_path
				from movie mov
				left join casting casti on casti.mov_id = mov.mov_id
				join role_movie rlmMov on rlmMov.rlm_cd = casti.rlm_cd
				left join people peo on peo.peo_id = casti.peo_id
				--left join peo_fil peoFil on peoFil.peo_id = peo.peo_id
				--left join file_info file on file.fil_id = peoFil.fil_id
				where mov.mov_id =  #MOV_ID#
	"
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE_CASTING {domain : DO_DT_MOVIE_CASTING_DTC notNull:"true" inOut :"out"}
}

create Task TK_UPDATE_MOVIES_TITLES {
    className : "io.vertigo.dynamox.task.TaskEngineProcBatch"
        request : "
        	UPDATE movie
   			SET title = #DTC_MOVIES.0.TITLE#, released= #DTC_MOVIES.0.RELEASED#, runtime= #DTC_MOVIES.0.RUNTIME#, 
   			description= #DTC_MOVIES.0.DESCRIPTION#, metadas_json=#DTC_MOVIES.0.METADAS_JSON#, imdbid= #DTC_MOVIES.0.IMDBID#,
   			year= #DTC_MOVIES.0.YEAR#
       		WHERE mov_id = #DTC_MOVIES.0.MOV_ID#
			"
	attribute DTC_MOVIES	 	{domain : DO_DT_MOVIE_DTC 		notNull:"true" 	inOut :"in"}
}
