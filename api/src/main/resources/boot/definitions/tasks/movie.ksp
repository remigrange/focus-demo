package rodolphe.demo.dao.movies

create Task TK_GET_MOVIES_BY_CRITERIA {
    className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : "
				select mov_id, title, released, year, runtime, description, metadas_json, imdbid
				from movie
				where 
					lower(title) like '%%'||lower(#SEARCH_TEXT#)||'%%'		
				order by title
				limit 20
			"
	attribute SEARCH_TEXT				{domain : DO_COMMENT				notNull:"true" 	inOut :"in"}
    attribute DTC_MOVIE	 				{domain : DO_DT_MOVIE_DTC 				notNull:"true" 	inOut :"out"}
}


create Task TK_GET_MOVIE_INDEX {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select
    					mov.mov_id, mov.title, mov.title as title_sort_only, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					--for better perfs
    					(select string_agg(gen_cd, '|') from mov_gen where mov_id = mov.mov_id group by mov_id) as genre_ids,
	   					(select string_agg(cou_cd, '|') from mov_cou where mov_id = mov.mov_id group by mov_id) as country_ids,
	   					(select string_agg(lan_cd, '|') from mov_lan where mov_id = mov.mov_id group by mov_id) as language_ids
	    			From
	    				movie mov 			
    			Where
    				mov.mov_id in (#DTC_MOVIE_IDS.ROWNUM.DUMMY_LONG#)
    			Order by
    				mov.mov_id
    "
    attribute DTC_MOVIE_IDS {domain : DO_DT_DUMMY_DTC notNull:"true" inOut :"in"}
    attribute DTC_MOVIES {domain : DO_DT_MOVIE_INDEX_DTC notNull:"true" inOut :"out"}
}

create Task TK_GET_MOVIE_VIEW_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select 
    					mov.mov_id, mov.title, mov.title as title_sort_only, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					--for better perfs
    					(select string_agg(gen_cd, '|') from mov_gen where mov_id = mov.mov_id group by mov_id) as genre_ids,
	   					(select string_agg(cou_cd, '|') from mov_cou where mov_id = mov.mov_id group by mov_id) as country_ids,
	   					(select string_agg(lan_cd, '|') from mov_lan where mov_id = mov.mov_id group by mov_id) as language_ids
    			From
    				movie mov
    			Where
    				mov.mov_id = #MOV_ID#
      "
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE {domain : DO_DT_MOVIE_VIEW_DTO notNull:"true" inOut :"out"}
}

create Task TK_GET_MOVIE_VIEW_FOR_MOVIE_DETAILS_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " Select 
    					mov.mov_id, mov.title, mov.released, mov.year, mov.runtime, mov.description, mov.metadas_json, mov.imdbid, 
    					--for better perfs
    					(select string_agg(gen_cd, '|') from mov_gen where mov_id = mov.mov_id group by mov_id) as genre_ids,
	   					(select string_agg(cou_cd, '|') from mov_cou where mov_id = mov.mov_id group by mov_id) as country_ids,
	   					(select string_agg(lan_cd, '|') from mov_lan where mov_id = mov.mov_id group by mov_id) as language_ids
    			From
    				movie mov
    			Where
    				mov.mov_id = #MOV_ID#
     "
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE {domain : DO_DT_MOVIE_VIEW_DTO notNull:"true" inOut :"out"}
}

create Task TK_GET_CASTING_BY_MOV_ID {
	className : "io.vertigo.dynamox.task.TaskEngineSelect"
    request : " select 
					casti.cast_id,
					peo.peo_name,
					rlmMov.label as role,
					casti.character_name
					--file.file_name,
					--file.mime_type,
					--file.file_path
				from movie mov
				left join casting casti on casti.mov_id = mov.mov_id
				join role_movie rlmMov on rlmMov.rlm_cd = casti.rlm_cd
				left join people peo on peo.peo_id = casti.peo_id
				--left join peo_fil peoFil on peoFil.peo_id = peo.peo_id
				--left join file_info file on file.fil_id = peoFil.fil_id
				where mov.mov_id =  #MOV_ID#
	"
    attribute MOV_ID {domain : DO_ID notNull:"true" inOut :"in"}
    attribute DTO_MOVIE_CASTING {domain : DO_DT_MOVIE_CASTING_DTC notNull:"true" inOut :"out"}
}
