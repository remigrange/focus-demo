/**
 *
 */
package rodolphe.demo.services.movie;

import io.vertigo.dynamo.domain.model.DtList;
import io.vertigo.dynamo.transaction.Transactional;
import io.vertigo.util.StringUtil;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;

import javax.inject.Inject;

import org.apache.log4j.Logger;

import rodolphe.demo.dao.exploitation.ExploitationPAO;
import rodolphe.demo.dao.exploitation.TempMovieDataDAO;
import rodolphe.demo.dao.movies.MoviesPAO;
import rodolphe.demo.domain.exploitation.TempMovieData;
import rodolphe.demo.domain.movies.Movie;
import rodolphe.demo.domain.movies.MovieView;

/**
 * Implementation of ExplotationServices.
 *
 * @author JDALMEIDA
 */
public class ExploitationServicesImpl implements ExploitationServices {

    @Inject
    private ExploitationPAO exploitationPAO;
    @Inject
    private MoviesPAO moviePAO;
    @Inject
    private TempMovieDataDAO tempMovieDataDAO;
    private final Logger logger = Logger.getLogger("*****************updateMovieTableData***************");

    /** {@inheritDoc} */
    @Override
    @Transactional
    public int cleanMovieTitle(final int minRank, final int maxRows) {
        Long maxRank = -1L;
        final DtList<MovieView> movieViews = moviePAO.getMovieView(minRank, maxRows);
        final DtList<Movie> movies = new DtList<>(Movie.class);
        for (final MovieView movieView : movieViews) {
            // Pour ne pas remttre à jour les donnes deja mise à jour.
            if (StringUtil.isEmpty(movieView.getMetadasJson())) {
                movies.add(CleanMovieData.parseMovieTitle(movieView));
            }
            if (maxRank < movieView.getRank()) {
                maxRank = movieView.getRank();
            }
        }
        exploitationPAO.updateMoviesTitles(movies);
        return maxRank.intValue();
    }

    /** {@inheritDoc} */
    @Override
    @Transactional
    public void createTempMovieTable() {
        try (final BufferedReader br = new BufferedReader(new FileReader("D:\\omdbData\\full_dump.txt"))) {
            String line = null;
            final String typeText = "\"Type\":";
            final String titleText = "\"Title\":";
            final String ratedText = "\"Rated\":";
            final String plotText = "\"Plot\":";
            final String imdbIDText = "\"imdbID\":";
            final String releasedText = "\"Released\":";
            final String yearText = "\"Year\":";
            final String posterText = "\"Poster\":";
            int lineNum = 0;
            final DtList<TempMovieData> list = new DtList<>(TempMovieData.class);
            while ((line = br.readLine()) != null) {
                ++lineNum;
                if (!StringUtil.isEmpty(line)) {
                    final String title = getAttributeFromString(line, titleText);
                    if (StringUtil.isEmpty(title)) {
                        continue;
                    }
                    final String type = getAttributeFromString(line, typeText);
                    final String rated = getAttributeFromString(line, ratedText);
                    final String plot = getAttributeFromString(line, plotText);
                    final String imdbID = getAttributeFromString(line, imdbIDText);
                    final String released = getAttributeFromString(line, releasedText);
                    final String year = getAttributeFromString(line, yearText);
                    final String poster = getAttributeFromString(line, posterText);
                    Date dateReleasead = null;
                    Integer yearValue = null;
                    if (!StringUtil.isEmpty(released)) {
                        dateReleasead = new Date(released);
                    }
                    if (!StringUtil.isEmpty(year)) {
                        try {
                            yearValue = Integer.parseInt(year);
                        } catch (final NumberFormatException e1) {
                            yearValue = null;
                            logger.debug(e1.getMessage());
                        }
                    }
                    final TempMovieData data = new TempMovieData();
                    data.setTitle(title);
                    data.setPlot(plot);
                    data.setImdbid(imdbID);
                    data.setReleased(dateReleasead);
                    data.setYear(yearValue);
                    data.setRated(rated);
                    data.setIsUpdated(false);
                    data.setPoster(poster);
                    data.setType(type);
                    list.add(data);
                }
            }
            for (final TempMovieData data : list) {
                tempMovieDataDAO.save(data);
            }
            logger.debug("Final Size = " + list.size());
        } catch (final IOException e) {
            logger.debug(e.getMessage());
        }
    }

    /**
     * Get attribute from String.
     *
     * @param line
     */
    private String getAttributeFromString(final String line, final String valueToSearch) {
        if (!StringUtil.isEmpty(line)) {
            final int index = line.indexOf(valueToSearch);
            if (index < 0) {
                return null;
            }
            String temp = line.substring(index);
            final int firstCommaIndex = temp.indexOf(",");
            if (firstCommaIndex < 0) {
                return null;
            }
            final int indexSeparator = temp.indexOf(":");
            if (indexSeparator < 0) {
                return null;
            }
            temp = temp.substring(0, firstCommaIndex);
            try {
                String ret = temp.substring(indexSeparator + 1);
                ret = ret.replaceAll("\"", "");
                if (ret.equalsIgnoreCase("N/A")) {
                    ret = null;
                }
                return ret;
            } catch (final IndexOutOfBoundsException e) {
                logger.debug("errorrrrr getAttributeFromString  " + valueToSearch + " tempp " + temp);
                throw e;
            }
        }
        return null;
    }
}
